<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:db5="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:py="https://www.github.com/openSUSE/suse-doc-style-checker"
  xmlns:exslt="http://exslt.org/common"
  exclude-result-prefixes="db5 xlink py exslt">
  <xsl:import href="library.xsl"/>

  <xsl:output method="xml" indent="yes" omit-xml-declaration="yes"/>

  <xsl:template match="*|db5:*" mode="part-title">Figures</xsl:template>

  <xsl:template priority="1"
    match="*[@role='legal']|legalnotice|db5:*[@role='legal']|db5:legalnotice"/>

  <xsl:template match="mediaobject|inlinemediaobject|
                       db5:mediaobject|db5:inlinemediaobject">

    <xsl:if
      test="(ancestor::informalfigure or ancestor::db5:informalfigure or
             self::inlinemediaobject or self::db5:inlinemediaobject) and
            not(textobject/phrase) and not(db5:textobject/db5:phrase)">
      <result type="warning">
        <xsl:call-template name="sourcehint"/>
        <message>Media object
          <xsl:call-template name="createid">
            <xsl:with-param name="node"
              select="imageobject[1]/imagedata[1]|
                      db5:imageobject[1]/db5:imagedata[1]"/>
            <xsl:with-param name="use-fileref-attribute" select="1"/>
          </xsl:call-template>
          does not contain alternative text.
        </message>
        <suggestion>Add a <tag>textobject</tag> element with a
          <tag>phrase</tag> inside it, then add descriptive text for the image
          to it.
        </suggestion>
      </result>
    </xsl:if>

    <xsl:apply-templates select="imageobject|db5:imageobject"/>
  </xsl:template>


  <xsl:template match="imageobject|db5:imageobject">


    <xsl:if
      test="not(preceding-sibling::imageobject) and
            not(preceding-sibling::db5:imageobject) and
            (following-sibling::imageobject or
            following-sibling::db5:imageobject)">

      <xsl:variable name="this-file"
        select="(imagedata[1]/@fileref|db5:imagedata[1]/@fileref)[1]"/>
      <xsl:variable name="this-name"
        select="py:splitpath($this-file,'filename')"/>
      <xsl:variable name="this-extension"
        select="py:splitpath($this-file,'extension')"/>

      <xsl:variable name="next-file"
        select="(following-sibling::imageobject[1]/imagedata[1]/@fileref|following-sibling::db5:imageobject[1]/db5:imagedata[1]/@fileref)[1]"/>
      <xsl:variable name="next-name"
        select="py:splitpath($next-file,'filename')"/>
      <xsl:variable name="next-extension"
        select="py:splitpath($next-file,'extension')"/>

      <!-- Error if multiple imageobjects given but no roles set. -->
      <xsl:if
        test="(../imageobject[not(@role)] or ../db5:imageobject[not(@role)])">
        <result type="error">
          <xsl:call-template name="sourcehint"/>
          <message>Media object
            <xsl:call-template name="createid">
              <xsl:with-param name="node"
                select="imagedata[1]|db5:imagedata[1]"/>
              <xsl:with-param name="use-fileref-attribute" select="1"/>
            </xsl:call-template>
            contains multiple <tag>imageobject</tag> elements but not all have a
            role.
          </message>
          <suggestion>If you intend to use different image attributes for
            different output formats, add a <quote>role</quote> attribute with
            the value being either <quote>fo</quote> (PDF) or
            <quote>html</quote> (XHTML/EPUB).
          </suggestion>
          <suggestion>If you do not intend to use different image attributes
            for different output formats, remove one of the
            <tag>imageobject</tag> elements.
          </suggestion>
        </result>
      </xsl:if>

      <!-- Error if file name for multiple mediaobjects is different but
      file format is the same. -->
      <xsl:if
        test="$this-extension = $next-extension and
              not($this-name = $next-name)">
        <result type="error">
          <xsl:call-template name="sourcehint"/>
          <message>Media object
            <xsl:call-template name="createid">
              <xsl:with-param name="node"
                select="imagedata[1]|db5:imagedata[1]"/>
              <xsl:with-param name="use-fileref-attribute" select="1"/>
            </xsl:call-template>
            contains multiple <tag>imagedata</tag> elements which reference
            files of the same type but with different file names.
          </message>
          <suggestion>Check if there is an issue with one of the file names
            or formats being referenced.
          </suggestion>
        </result>
      </xsl:if>
    </xsl:if>

    <!-- Error if single imageobject, but role is set -->
    <xsl:if
      test="@role and
            not(preceding-sibling::imageobject) and
            not(preceding-sibling::db5:imageobject) and
            not(following-sibling::imageobject) and
            not(following-sibling::db5:imageobject)">
      <xsl:variable name="suggested-role">
        <xsl:choose>
          <xsl:when test="@role='html'">fo</xsl:when>
          <xsl:when test="@role='fo'">html</xsl:when>
        </xsl:choose>
      </xsl:variable>

      <result type="error">
        <xsl:call-template name="sourcehint"/>
        <message>Media object
          <xsl:call-template name="createid">
            <xsl:with-param name="node"
              select="imagedata[1]|db5:imagedata[1]"/>
            <xsl:with-param name="use-fileref-attribute" select="1"/>
          </xsl:call-template>
          contains a single <tag>imageobject</tag> with a role.
        </message>
        <suggestion>If you intend to use different image attributes for 
          different output formats, add a second <tag>imageobject</tag> with
          <xsl:choose>
            <xsl:when test="$suggested-role != ''">
              the role <quote><xsl:value-of select="$suggested-role"/></quote>.
            </xsl:when>
            <xsl:otherwise>
              a different role.
            </xsl:otherwise>
          </xsl:choose>
        </suggestion>
        <suggestion>If you do not intend to use different image attributes
          for different output formats, remove the <quote>role</quote>
          attribute from the <tag>imageobject</tag> element.
        </suggestion>
      </result>
    </xsl:if>

    <xsl:apply-templates select="imagedata|db5:imagedata"/>
  </xsl:template>


  <xsl:template match="imagedata|db5:imagedata">
    <!-- @fileref is mandatory, even in DocBook. -->
    <xsl:variable name="fileref" select="normalize-space(@fileref)"/>
    <xsl:variable name="fileref-bad">
      <xsl:call-template name="badcharacters">
        <xsl:with-param name="input" select="$fileref"/>
        <xsl:with-param name="characters" select="'a-z|0-9|._-+'"/>
      </xsl:call-template>
    </xsl:variable>

    <!-- Empty fileref is bad. -->
    <xsl:if test="string-length($fileref) &lt; 1">
      <result type="error">
        <xsl:call-template name="sourcehint"/>
        <message>
          No file name given for media object in
          <xsl:call-template name="createid"/>.
        </message>
        <suggestion>
         Make sure the image you want displayed is referenced.
        </suggestion>
      </result>
    </xsl:if>

    <xsl:if test="$fileref-bad = 'yes'">
      <xsl:variable name="fileref-capital">
        <xsl:call-template name="badcharacters">
          <xsl:with-param name="input" select="$fileref"/>
          <xsl:with-param name="mode" select="'wanted'"/>
          <xsl:with-param name="characters" select="'A-Z'"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="fileref-latinextra">
        <xsl:call-template name="badcharacters">
          <xsl:with-param name="input" select="$fileref"/>
          <xsl:with-param name="mode" select="'wanted'"/>
          <xsl:with-param name="characters" select="'a-z[x]|A-Z[x]'"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="fileref-other">
        <xsl:call-template name="badcharacters">
          <xsl:with-param name="input" select="$fileref"/>
          <xsl:with-param name="characters" select="'a-z|A-Z|a-z[x]|A-Z[x]|0-9|._-+'"/>
        </xsl:call-template>
      </xsl:variable>
      <result type="error">
        <xsl:call-template name="sourcehint"/>
        <message>Image file name
          <xsl:call-template name="createid">
            <xsl:with-param name="use-fileref-attribute" select="1"/>
          </xsl:call-template>
          contains
          <!-- This can't be the right way to construct a sentence... -->
          <xsl:if test="$fileref-capital = 'yes'">
            <xsl:text>capital letters</xsl:text>
          </xsl:if>
          <xsl:choose>
            <xsl:when test="$fileref-capital = 'yes' and $fileref-latinextra = 'yes' and $fileref-other = 'yes'">
              <xsl:text>, </xsl:text>
            </xsl:when>
            <xsl:when test="($fileref-capital = 'yes' and $fileref-latinextra = 'yes') or
                             ($fileref-capital = 'yes' and $fileref-other = 'yes')">
              <xsl:text> and </xsl:text>
            </xsl:when>
          </xsl:choose>
          <xsl:if test="$fileref-latinextra = 'yes'">
            <xsl:text>accented letters or umlauts</xsl:text>
          </xsl:if>
          <xsl:choose>
            <xsl:when test="$fileref-capital = 'yes' and $fileref-latinextra = 'yes' and $fileref-other = 'yes'">
              <xsl:text>, and </xsl:text>
            </xsl:when>
            <xsl:when test="$fileref-latinextra = 'yes' and $fileref-other = 'yes'">
              <xsl:text> and </xsl:text>
            </xsl:when>
          </xsl:choose>
          <xsl:if test="$fileref-other = 'yes'">
            <xsl:text>special characters</xsl:text>
          </xsl:if>
          <xsl:text>.</xsl:text>
        </message>
        <xsl:if test="$fileref-capital = 'yes'">
          <suggestion>When using letters in image file names, always use their
           lowercase version.
          </suggestion>
        </xsl:if>
        <xsl:if test="$fileref-latinextra = 'yes'">
          <suggestion>When using letters in image file names, only use those
            occurring in the English alphabet.
          </suggestion>
        </xsl:if>
        <xsl:if test="$fileref-other = 'yes'">
          <suggestion>Use only the following special characters in image file
            names: ._-+
          </suggestion>
        </xsl:if>
      </result>
    </xsl:if>

    <!-- Error if filename and format attribute do not match -->
    <xsl:if test="@format">
      <xsl:variable name="format">
        <xsl:call-template name="change-case">
          <xsl:with-param name="text" select="@format"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="this-extension"
        select="py:splitpath(@fileref,'extension')"/>

      <xsl:if test="not($format = $this-extension)">
        <result type="error">
        <xsl:call-template name="sourcehint"/>
        <message>
          In media file reference
          <xsl:call-template name="createid">
            <xsl:with-param name="node"
              select="."/>
            <xsl:with-param name="use-fileref-attribute" select="1"/>
          </xsl:call-template>,
          the file format from the attribute <quote>format</quote> does
          not match the file extension in <quote>fileref</quote>.
        </message>
        <suggestion>Make sure both extensions match.</suggestion>
        </result>
      </xsl:if>
    </xsl:if>

    <!-- Error if there is no width for fo images -->
    <xsl:if test="
       not(@width) and
       (parent::imageobject[(@role='fo' or not(@role))] or
        parent::db5:imageobject[(@role='fo' or not(@role))])"><!--]"> -->
      <xsl:variable name="role">
        <xsl:if test="parent::imageobject[@role] or
                      parent::db5:imageobject[@role]"> role="<xsl:value-of select="@role"/>"</xsl:if>
      </xsl:variable>
      <result type="error">
        <xsl:call-template name="sourcehint"/>
        <message>
          The media file reference
          <xsl:call-template name="createid">
            <xsl:with-param name="node" select="."/>
            <xsl:with-param name="use-fileref-attribute" select="1"/>
          </xsl:call-template>
          has no <em>width</em> attribute.
        </message>
        <suggestion>
          Within <tag>imageobject<xsl:value-of select="$role"/></tag>, add a
          <em>width</em> attribute with a percentage value (such as
          <quote>75%</quote>) to the <tag>imagedata</tag>.
        </suggestion>
      </result>
    </xsl:if>

    <!-- Error if the image width is too wide -->
    <xsl:if test="@width">
      <xsl:variable name="width" select="normalize-space(@width)"/>
      <xsl:variable name="role">
        <xsl:if test="parent::imageobject[@role] or
                      parent::db5:imageobject[@role]"> role="<xsl:value-of select="@role"/>"</xsl:if>
      </xsl:variable>
      <xsl:variable name="numeric-value">
        <xsl:value-of select="py:splitvalueunit($width)"/>
      </xsl:variable>
      <xsl:variable name="unit-candidate">
        <xsl:value-of select="py:splitvalueunit($width,'unit')"/>
      </xsl:variable>
      <xsl:variable name="unit">
        <xsl:choose>
          <xsl:when
            test="$unit-candidate = 'cm' or $unit-candidate = 'em' or
                  $unit-candidate = 'in' or $unit-candidate = 'mm' or
                  $unit-candidate = 'pc' or $unit-candidate = 'pt' or
                  $unit-candidate = 'px' or $unit-candidate = '%'"><xsl:value-of select="$unit-candidate"/></xsl:when>
          <xsl:when test="$unit-candidate = ''">px</xsl:when>
          <xsl:otherwise>BAD_UNIT</xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="too-wide">
        <xsl:choose>
          <xsl:when test="$unit = '%' and $numeric-value &gt; 100">1</xsl:when>
          <xsl:when test="$unit = 'px' and $numeric-value &gt; 500">1</xsl:when>
          <!-- FIXME: The other units are not in wide use in our docs today,
          but some refinement/additions might be nice. -->
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </xsl:variable>

      <xsl:if test="$numeric-value = 'MALFORMED_VALUE'">
        <result type="error">
          <xsl:call-template name="sourcehint"/>
          <message>
            The media file reference
            <xsl:call-template name="createid">
              <xsl:with-param name="node" select="."/>
              <xsl:with-param name="use-fileref-attribute" select="1"/>
            </xsl:call-template>
            has a <em>width</em> attribute with an invalid value.
          </message>
          <suggestion>
            Correct the invalid value
            <quote><xsl:value-of select="$width"/></quote>. Preferably use
            a percentage (such as <quote>75%</quote>).
          </suggestion>
        </result>
      </xsl:if>

      <xsl:if test="$unit = 'BAD_UNIT' and not($numeric-value = 'MALFORMED_VALUE')">
        <result type="error">
          <xsl:call-template name="sourcehint"/>
          <message>
            The media file reference
            <xsl:call-template name="createid">
              <xsl:with-param name="node" select="."/>
              <xsl:with-param name="use-fileref-attribute" select="1"/>
            </xsl:call-template>
            has a <em>width</em> attribute with an invalid unit.
          </message>
          <suggestion>
            Correct the invalid unit
            <quote><xsl:value-of select="$unit-candidate"/></quote>. Preferably use
            a percentage (such as <quote>75%</quote>).
          </suggestion>
        </result>
      </xsl:if>

      <xsl:if test="$too-wide = '1'">
        <result type="warning">
          <xsl:call-template name="sourcehint"/>
          <message>
            The media file reference
            <xsl:call-template name="createid">
              <xsl:with-param name="node" select="."/>
              <xsl:with-param name="use-fileref-attribute" select="1"/>
            </xsl:call-template>
            has a <em>width</em> attribute which might lead to the media
            being wider than the page area allows.
          </message>
          <suggestion>
            Correct the width
            <quote><xsl:value-of select="$width"/></quote>. Preferably use
            a percentage (such as <quote>75%</quote>).
          </suggestion>
        </result>
      </xsl:if>

    </xsl:if>

  </xsl:template>

</xsl:stylesheet>
