<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:db5="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:py="https://www.github.com/openSUSE/suse-doc-style-checker"
  xmlns:exslt="http://exslt.org/common"
  exclude-result-prefixes="db5 xlink py exslt">
  <xsl:import href="library.xsl"/>

  <xsl:output method="xml" indent="yes" omit-xml-declaration="yes"/>

  <xsl:template match="*|db5:*" mode="part-title">Computer Elements</xsl:template>

  <xsl:template priority="1"
    match="*[@role='legal']|legalnotice|db5:*[@role='legal']|db5:legalnotice"/>

  <xsl:template match="command|replaceable|option|literal|
                       db5:command|db5:replaceable|db5:option|db5:literal">
    <xsl:variable name="length" select="string-length(normalize-space(text()))"/>
    <!-- Deliberately higher than the styleguide asks for. Try to avoid annoying
         people. -->
    <xsl:if test="$length &gt; 50 and
                  not(self::*/ancestor::*[
                    local-name(.) = 'screen' or
                    local-name(.) = 'programlisting' or
                    local-name(.) = 'userinput' or
                    local-name(.) = 'literallayout'
                  ])">
      <result type="warning">
        <xsl:call-template name="sourcehint"/>
        <message>
          <tag><xsl:value-of select="local-name(.)"/></tag> element
          <xsl:call-template name="createid"/>
          contains <xsl:value-of select="$length"/> characters.
        </message>
        <suggestion>Use a <tag>screen</tag> element.
        </suggestion>
      </result>
    </xsl:if>
  </xsl:template>

  <xsl:template match="filename|db5:filename">
    <xsl:variable name="length" select="string-length(normalize-space(text()))"/>
    <!-- Deliberately higher than the styleguide asks for. Try to avoid annoying
         people. -->
    <xsl:if test="$length &gt; 50 and
                  not(self::*/ancestor::*[
                    local-name(.) = 'screen' or
                    local-name(.) = 'programlisting' or
                    local-name(.) = 'userinput' or
                    local-name(.) = 'literallayout'
                  ])">
      <xsl:variable name="references-file">
        <xsl:call-template name="parse-filename-file">
          <xsl:with-param name="text" select="normalize-space(text())"/>
        </xsl:call-template>
      </xsl:variable>
      <result type="warning">
        <xsl:call-template name="sourcehint"/>
        <message>
          <tag><xsl:value-of select="local-name(.)"/></tag> element
          <xsl:call-template name="createid"/>
          contains <xsl:value-of select="$length"/> characters.
        </message>
        <xsl:if test="$references-file = 'yes'">
          <suggestion>If it makes sense, split directory path and file name.
          </suggestion>
        </xsl:if>
        <suggestion>Where possible, use <tag>replaceable</tag> elements to
          shorten the path.
        </suggestion>
      </result>
    </xsl:if>
  </xsl:template>

  <xsl:template name="parse-filename-file">
    <xsl:param name="text" select="'UNSET'"/>
    <xsl:choose>
      <xsl:when test="$text = 'UNSET'"/> <!-- No op. -->
      <xsl:when test="contains($text, '/')">
        <xsl:call-template name="parse-filename-file">
          <xsl:with-param name="text" select="substring-after($text, '/')"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="contains($text, '\')">
        <xsl:call-template name="parse-filename-file">
          <xsl:with-param name="text" select="substring-after($text, '\')"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="string-length($text) &gt; 0">
        <xsl:choose>
          <!-- Check for a file ending (a heuristic that will fail occasionally) -->
          <xsl:when test="contains($text, '.') and
                          string-length(substring-after($text, '.')) &gt; 1 and
                          string-length(substring-after($text, '.')) &lt; 10">
            <xsl:text>yes</xsl:text>
          </xsl:when>
          <!-- Check for known file names that usually don't have an ending -->
          <xsl:when test="$text = 'CHANGES' or $text = 'CHANGELOG' or
                          $text = 'LICENSE' or $text = 'NEWS' or
                          $text = 'README'">
            <xsl:text>yes</xsl:text>
          </xsl:when>
          <xsl:otherwise>no</xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <!-- Zero-length string: no file name contained. -->
      <xsl:otherwise>no</xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>
